{
  "edges": [
  ],
  "metadata": {
  },
  "nodes": [
    {
      "height": 4640,
      "id": "bc6a5c5231586ffc",
      "styleAttributes": {
      },
      "text": "```\n  // É funcionou... Codigo em parceria com o chat gpt, claude e Edinaldo. Sem os dois primeiros, isso não seria possivel. Obrigado.\n\n  function importarEDepurarDados() {\n    try {\n      // Constantes\n      const CONTAS_INDESEJADAS = [\"11005-1\", \"1111-1\", \"11137-6\", \"11402-2\", \"13003965-0\", \"5970-6\"];\n      const SUBSTITUICOES_RESPONSAVEIS = {\n        \"MISAEL DE CARVALHO SOUSA\": \"MISAEL\",\n        \"NIVEA CABEDO FEITOSA\": \"NIVEA\",\n        \"LUANA\": \"LUANNA\",\n        \"REINALDO LIMA\": \"REINALDO\",\n        \"PRICYLA SANTOS\": \"PRICYLA\",\n        \"JULIETE PEREIRA DA SILVA MIRANDA\": \"JULIETE\",\n        \"MATUSALA RODRIGUES SILVA\": \"MATUSALA\", \n        \"LUANNA SILVA\": \"LUANNA\",\n        \"CLAUDIANE SOUSA\": \"CLAUDIANE\",\n        \"BRUNA RAQUEL VALERIO\": \"BRUNA\"\n      };\n\n      const idPlanilhaBruta = '1yjBSHyWZP3jr4Cx6-uJgigbCOd3yIGKqDqcoF5uEFTE';\n      const nomeAbaOrigem = 'Planilha1';\n      const nomeAbaDestino = 'Dados Processados';\n\n      Logger.log('Iniciando importação de dados...');\n\n      const planilhaBruta = SpreadsheetApp.openById(idPlanilhaBruta);\n      const abaOrigem = planilhaBruta.getSheetByName(nomeAbaOrigem);\n      if (!abaOrigem) {\n        throw new Error('Aba não encontrada: ' + nomeAbaOrigem);\n      }\n\n      const dadosOriginais = abaOrigem.getDataRange().getValues();\n      Logger.log('Dados originais obtidos: ' + dadosOriginais.length + ' linhas');\n\n      const cabecalhos = dadosOriginais[0];\n      const dados = dadosOriginais.slice(1);\n      const idx = {};\n      cabecalhos.forEach((nome, i) => {\n        idx[nome] = i;\n        Logger.log('Mapeando coluna: ' + nome + ' -> índice ' + i);\n      });\n\n      const dadosTransformados = [];\n      Logger.log('Iniciando transformação de ' + dados.length + ' linhas');\n\n      let contadorExecucao = 0;\n      let contadorContasIndesejadas = 0;\n\n      dados.forEach((linha, index) => {\n        // Filtrar linhas onde \"Status do Projeto\" = \"EXECUÇÃO\"\n        if (linha[idx[\"Status do Projeto\"]] !== \"EXECUÇÃO\") {\n          return;\n        }\n        contadorExecucao++;\n\n        // Processar os Dados Bancários\n        let dadosBancarios = linha[idx[\"Dados Bancários\"]];\n        \n        // Dividir a string pelos delimitadores\n        let partesDadosBancarios = dadosBancarios.split(\" - \");\n        \n        // Pegar a parte que contém a conta corrente (terceira parte após divisão)\n        let contaCorrente = partesDadosBancarios.length >= 3 ? partesDadosBancarios[2] : dadosBancarios;\n        \n        // Remover \"CC: \" do início\n        contaCorrente = contaCorrente.replace(\"CC: \", \"\");\n\n        // Verificar se é uma conta indesejada\n        if (CONTAS_INDESEJADAS.includes(contaCorrente)) {\n          contadorContasIndesejadas++;\n          return;\n        }\n\n        // Criar nova linha com as colunas desejadas\n        const novaLinha = [\n          contaCorrente,\n          linha[idx[\"Núm. Projeto\"]],\n          linha[idx[\"Título do Projeto\"]],\n          linha[idx[\"Data de Vigência Inicial Atual\"]],\n          linha[idx[\"Data de Vigência Atual Final\"]],\n          linha[idx[\"Exercício de Início de Execução\"]],\n          linha[idx[\"Tipo\\\\Categoria do Projeto\"]],\n          linha[idx[\"Instituições, Unidades e Centros\"]],\n          linha[idx[\"Orçamento Aprovado\"]],\n          linha[idx[\"Assistentes\"]]\n        ];\n        \n        // Substituir valores em \"Responsáveis do Projeto\"\n        const responsavel = novaLinha[9];\n        novaLinha[9] = SUBSTITUICOES_RESPONSAVEIS[responsavel] || responsavel || \"NÃO CADASTRADO NO SAGI\";\n\n        dadosTransformados.push(novaLinha);\n\n        // Log a cada 100 linhas processadas\n        if ((index + 1) % 100 === 0) {\n          Logger.log(`Processadas ${index + 1} linhas...`);\n        }\n      });\n\n      Logger.log('Estatísticas de processamento:');\n      Logger.log(`Total de linhas: ${dados.length}`);\n      Logger.log(`Linhas em EXECUÇÃO: ${contadorExecucao}`);\n      Logger.log(`Linhas com contas indesejadas: ${contadorContasIndesejadas}`);\n      Logger.log(`Linhas após transformação: ${dadosTransformados.length}`);\n\n      if (dadosTransformados.length === 0) {\n        throw new Error('Nenhum dado encontrado após aplicar os filtros. Verifique os critérios de filtragem.');\n      }\n\n      const novosCabecalhos = [\n        \"Conta Corrente\",\n        \"Núm. Projeto\",\n        \"Título do Projeto\",\n        \"Vigência Inicial\",\n        \"Vigência Final\",\n        \"Exercício\",\n        \"Tipo\\\\Categoria do Projeto\",\n        \"Instituições, Unidades e Centros\",\n        \"Orçamento Aprovado\",\n        \"Responsáveis do Projeto\"\n      ];\n\n      const ssAtual = SpreadsheetApp.getActiveSpreadsheet();\n      let abaDestino = ssAtual.getSheetByName(nomeAbaDestino);\n      if (!abaDestino) {\n        abaDestino = ssAtual.insertSheet(nomeAbaDestino);\n        Logger.log('Nova aba criada: ' + nomeAbaDestino);\n      } else {\n        abaDestino.clearContents();\n        Logger.log('Aba existente limpa: ' + nomeAbaDestino);\n      }\n\n      // Escrever cabeçalhos\n      abaDestino.getRange(1, 1, 1, novosCabecalhos.length)\n        .setValues([novosCabecalhos])\n        .setFontWeight('bold')\n        .setBackground('#f3f3f3');\n\n      // Escrever dados transformados\n      if (dadosTransformados.length > 0) {\n        abaDestino.getRange(2, 1, dadosTransformados.length, novosCabecalhos.length)\n          .setValues(dadosTransformados);\n        Logger.log('Dados escritos na planilha');\n      }\n\n      // Aplicar formatação\n      const qtdLinhas = dadosTransformados.length + 1;\n\n      // Formatar colunas de data\n      const colunasData = [4, 5];\n      colunasData.forEach(function(coluna) {\n        abaDestino.getRange(2, coluna, qtdLinhas - 1)\n          .setNumberFormat('dd/MM/yyyy');\n      });\n\n      // Formatar coluna de moeda\n      abaDestino.getRange(2, 9, qtdLinhas - 1)\n        .setNumberFormat('R$ #,##0.00');\n\n      // Adicionar bordas à tabela\n      abaDestino.getRange(1, 1, qtdLinhas, novosCabecalhos.length)\n        .setBorder(true, true, true, true, true, true);\n\n      // Ajustar largura das colunas\n      abaDestino.autoResizeColumns(1, novosCabecalhos.length);\n\n      Logger.log('Formatação aplicada com sucesso');\n\n      // Mensagem de sucesso\n      SpreadsheetApp.getUi().alert('Dados importados e processados com sucesso!\\n' +\n        'Total de linhas processadas: ' + dadosTransformados.length);\n\n    } catch (e) {\n      Logger.log('Erro ao executar o script: ' + e.message);\n      Logger.log('Stack trace: ' + e.stack);\n      SpreadsheetApp.getUi().alert('Erro ao executar o script: ' + e.message);\n    }\n  }\n\n  function onOpen() {\n    const ui = SpreadsheetApp.getUi();\n    ui.createMenu('Scripts Personalizados')\n      .addItem('Importar e Depurar Dados', 'importarEDepurarDados')\n      .addToUi();\n  }\n```",
      "type": "text",
      "width": 1290,
      "x": -960,
      "y": -3420
    }
  ]
}